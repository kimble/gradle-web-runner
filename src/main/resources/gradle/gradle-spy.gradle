import groovy.json.JsonOutput

class BuildSpy {

    ServerSocket serverSocket
    Socket socket
    Writer socketWriter

    BuildSpy(int port) {
        try {
            serverSocket = new ServerSocket(port);
            println "Gradle build spy started on port $port"
            println "I'll be hanging around waiting for the g-viz to connect.."
        }
        catch (IOException ex) {
            throw new BuildCancelledException("Unable to listen to port " + port, ex)
        }

        socket = serverSocket.accept()
        socketWriter = socket.outputStream.newWriter("utf-8")
    }

    synchronized void send(String key, Object payload) {
        socketWriter.write(JsonOutput.toJson([
                message: key,
                payload: payload
        ]) + "\n")
        socketWriter.flush()
    }

}

def spy = null




gradle.addListener(new BuildListener() {

    void buildStarted(Gradle gradle) {
        println "\nBuild started!\n"
    }

    void settingsEvaluated(Settings settings) {
        logger.lifecycle "Settings evaluated"

        String spyPort = System.getenv("SPY_PORT")

        if (!spyPort) {
            throw new BuildCancelledException("No environment variable SPY_PORT set")
        }

        spy = new BuildSpy(Integer.parseInt(spyPort))
        spy.send "project-name", settings.rootProject.name
        spy.send "max-worker-count", settings.startParameter.maxWorkerCount
    }

    void projectsLoaded(Gradle gradle) {
        println "Halla, I'm loaded!"


        gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
            def tasks = graph.allTasks.collect { Task task ->
                return [
                        name: task.name,
                        path: task.path,
                        description: task.description,
                        dependsOn: task.taskDependencies.getDependencies(task).collect { it.path }
                ]
            }

            spy.send "tasks", tasks
        }


        gradle.taskGraph.addTaskExecutionListener(new TaskExecutionListener() {

            @Override
            void beforeExecute(Task task) {
                spy.send("before-task", [
                        name: task.name,
                        path: task.path,
                        description: task.description
                ])
            }

            @Override
            void afterExecute(Task task, TaskState state) {
                spy.send("after-task", [
                        name: task.name,
                        path: task.path,
                        didWork: state.didWork,
                        executed: state.executed,
                        skipped: state.skipped,
                        skippedMessage: state.skipMessage,
                        failureMessage: state.failure?.message
                ])
            }

        })
    }

    void projectsEvaluated(Gradle gradle) {
        println "Projects evaluated!"
    }

    void buildFinished(BuildResult result) {
        println "Finished"
    }

})

